import Head from "next/head";
import { fetchCategories } from "../utils/fetchCategories";
import { GetStaticProps } from "next";
import { fetchProducts } from "@/utils/fetchProducts";
import Basket from "@/components/Basket";
import { fetchParentProducts } from "@/utils/fetchParentProducts";
import { useEffect, useState } from "react";
import dynamic from 'next/dynamic'

interface Props {
  categories: Category[];
  parentProducts: ParentProduct[];
  products: Product[];
}

export default function Home({ categories, parentProducts, products }: Props) {
  const [mounted, setMounted] = useState(false);

  useEffect(() => setMounted(true), []);

  if (!mounted) return null;


const DynamicProductPanel = dynamic(() => import('../components/ProductPanel'), {
  loading: () => <p>Loading...</p>,
})

const DynamicHeader = dynamic(() => import('../components/Header'), {
  loading: () => <p>Loading...</p>,
})

const DynamicLanding = dynamic(() => import('../components/Landing'))
  return (
    <div>
      <Head>
        <title>Crochetva PlushPals</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="Logo2.png" />
      </Head>

      <DynamicHeader />

      <Basket />

      <main className="relative h-[200vh] min-h-screen">
        <DynamicLanding />
      </main>
      <section className="relative z-40 -mt-[100vh] min-h-screen bg-[#fcf4f4]">
        <DynamicProductPanel 
            categories={categories}
            parentProducts={parentProducts}
            products={products}
        />
        
      </section>
    </div>
  );
}

// Backend Code to Sanity
export const getStaticProps: GetStaticProps<Props> = async (
) => {
  const categories = await fetchCategories();
  const parentProducts = await fetchParentProducts();
  const products = await fetchProducts();

  return {
    props: {
      categories,
      parentProducts,
      products,
    },

    // Next.js will attempt to regenerate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    // This helps with caching the data
    revalidate: 10,
  };
};
